# fileOperations.pyimport uiimport apiimport osimport wximport guiimport gui.guiHelperfrom logHandler import logimport addonHandleraddonHandler.initTranslation()class RenameDialog(wx.Dialog):    def __init__(self, parent, fileName):        super().__init__(parent, title="")        self.fileName = fileName        self.newName = None        self.InitUI()            def InitUI(self):        mainSizer = wx.BoxSizer(wx.VERTICAL)        sHelper = gui.guiHelper.BoxSizerHelper(self, orientation=wx.VERTICAL)                name, ext = os.path.splitext(self.fileName)                self.nameCtrl = sHelper.addItem(wx.TextCtrl(self, value=name))        self.nameCtrl.SelectAll()                if ext and ext.startswith('.'):            ext = ext[1:]        self.extCtrl = sHelper.addItem(wx.TextCtrl(self, value=ext))                btnSizer = self.CreateButtonSizer(wx.OK | wx.CANCEL)        sHelper.addItem(btnSizer, flag=wx.ALIGN_CENTER)                self.SetSizer(mainSizer)        mainSizer.Fit(self)                self.CentreOnScreen()        self.nameCtrl.SetFocus()                self.Bind(wx.EVT_BUTTON, self.OnOk, id=wx.ID_OK)        self.Bind(wx.EVT_BUTTON, self.OnCancel, id=wx.ID_CANCEL)        self.Bind(wx.EVT_TEXT_ENTER, self.OnOk)        self.Bind(wx.EVT_CLOSE, self.OnClose)            def OnOk(self, event):        name = self.nameCtrl.Value.strip()        ext = self.extCtrl.Value.strip()                if not name:            ui.message(_("File name cannot be empty"))            return                    if ext:            ext = "." + ext        self.newName = name + ext        self.EndModal(wx.ID_OK)            def OnCancel(self, event):        self.EndModal(wx.ID_CANCEL)            def OnClose(self, event):        self.EndModal(wx.ID_CANCEL)class FileOperations:    def __init__(self, plugin):        self.plugin = plugin        self.renameDialog = None    def cleanup(self):        if self.renameDialog:            try:                self.renameDialog.Destroy()            except:                pass    def _RecalcSize(self, iResult, iTotalSize=0):        fResult = float(iResult)        if iTotalSize > 0:            iTotalSize = float(iTotalSize)            fResult = iTotalSize - fResult            i = 0        while fResult >= 1024:            fResult = fResult / 1024            i = i + 1        sRecalcSize = ' {:.2f}'.format(fResult)        sResult = (sRecalcSize, i)        return sResult    def saySize(self):        """say size for single or multiple selected items"""        focus = api.getFocusObject()        if not focus or focus.appModule.appName != "explorer":            return                    selectedItems, shellWindow = self.plugin._getSelectedItems()        if not selectedItems:            ui.message(_("No items selected"))            return                    totalSize = 0        isDrive = False                for name, path in selectedItems:            if self.plugin.objFSO.FileExists(path):                try:                    totalSize += self.plugin.objFSO.GetFile(path).Size                except:                    pass            elif self.plugin.objFSO.DriveExists(path):                isDrive = True                try:                    drive = self.plugin.objFSO.GetDrive(path)                    usedSize = drive.TotalSize - drive.FreeSpace                    totalSize += usedSize                except:                    pass            elif self.plugin.objFSO.FolderExists(path):                try:                    folder = self.plugin.objFSO.GetFolder(path)                    for root, dirs, files in os.walk(path):                        for f in files:                            fp = os.path.join(root, f)                            try:                                totalSize += os.path.getsize(fp)                            except:                                pass                except:                    pass                if totalSize == 0 and not isDrive:            ui.message(_("No access to size data"))            return                    colRecalc = self._RecalcSize(totalSize)                    sDimension = [" bytes", " KB", " MB", " GB", " TB"][colRecalc[1]]        sRecalcSize = colRecalc[0]        s_Info = sRecalcSize + sDimension                if len(selectedItems) > 1:            s_Info = _("{count} items {size}").format(count=len(selectedItems), size=s_Info)                    ui.message(s_Info)    def renameFile(self):        """Rename selected file"""        focus = api.getFocusObject()        if not focus or focus.appModule.appName != "explorer":            return                    try:            selectedItems, shellWindow = self.plugin._getSelectedItems()            if not selectedItems:                ui.message(_("No items selected"))                return                            if len(selectedItems) > 1:                ui.message(_("Please select only one file"))                return                            filePath = selectedItems[0][1]                        if not os.path.isfile(filePath):                ui.message(_("Please select a file, not a folder"))                return                            fileName = os.path.basename(filePath)            dirName = os.path.dirname(filePath)                        wx.CallAfter(self._showRenameDialog, fileName, dirName, filePath)                        except Exception as e:            log.error(f"Error in renameFile: {e}")            ui.message(_("Error renaming file"))    def _showRenameDialog(self, fileName, dirName, filePath):        try:            if self.renameDialog and self.renameDialog.IsShown():                self.renameDialog.Destroy()                            self.renameDialog = RenameDialog(gui.mainFrame, fileName)                        self.renameDialog.Raise()                        result = self.renameDialog.ShowModal()                        if result == wx.ID_OK and self.renameDialog.newName:                newPath = os.path.join(dirName, self.renameDialog.newName)                                if newPath == filePath:                    ui.message(_("File name not changed"))                    return                                    if os.path.exists(newPath):                    ui.message(_("A file with this name already exists"))                    return                                    try:                    os.rename(filePath, newPath)                    ui.message(_("File renamed to {name}").format(name=self.renameDialog.newName))                except Exception as e:                    log.error(f"Error renaming file: {e}")                    ui.message(_("Error renaming file"))                                self.renameDialog.Destroy()            self.renameDialog = None        except Exception as e:            log.error(f"Error showing rename dialog: {e}")            ui.message(_("Error opening rename dialog"))            if self.renameDialog:                try:                    self.renameDialog.Destroy()                except:                    pass                self.renameDialog = None