# __init__.py# Copyright (C) 2025 ['chai chaimee']# Licensed under GNU General Public License. See COPYING.txt for details.import globalPluginHandlerimport uiimport apiimport scriptHandlerfrom NVDAObjects import NVDAObjectfrom NVDAObjects.UIA import UIAfrom controlTypes import Role, Stateimport addonHandlerfrom comtypes.client import CreateObjectfrom logHandler import logimport guiimport wximport gui.guiHelperfrom .config import loadConfig, saveConfigfrom keyboardHandler import KeyboardInputGestureimport corefrom threading import Timer, Threadimport winUserimport osimport sysimport subprocessimport shutilimport tonesfrom .xPlorerManager import xPlorerSettingsPanel, ExplorerManagerfrom .fileOperations import RenameDialog, FileOperationsfrom .compressionManager import CompressionManagerfrom .clipboardManager import ClipboardManagerfrom .selectionManager import SelectionManageraddonHandler.initTranslation()class GlobalPlugin(globalPluginHandler.GlobalPlugin):    scriptCategory = _("xPlorer")        def __init__(self):        super().__init__()        self.objShellApp = CreateObject("Shell.Application")        self.objFSO = CreateObject("scripting.FileSystemObject")        gui.settingsDialogs.NVDASettingsDialog.categoryClasses.append(xPlorerSettingsPanel)        self.manager = ExplorerManager(self)        self.fileOps = FileOperations(self)        self.compression = CompressionManager(self)        self.clipboard = ClipboardManager(self)        self.selection = SelectionManager(self)                tools_dir = os.path.join(os.path.dirname(__file__), "tools")        if os.path.exists(tools_dir) and tools_dir not in sys.path:            sys.path.insert(0, tools_dir)    def terminate(self):        super().terminate()        gui.settingsDialogs.NVDASettingsDialog.categoryClasses.remove(xPlorerSettingsPanel)        self.fileOps.cleanup()        self.compression.cleanup()        self.selection.cleanup()    def _getActiveExplorerWindow(self):        """Get the active Explorer window with focus"""        try:            shellWindows = self.objShellApp.Windows()            foreground = api.getForegroundObject()            targetHwnd = foreground.windowHandle                        for i in range(shellWindows.Count):                w = shellWindows.Item(i)                try:                    if w.hwnd == targetHwnd and w.Visible and w.Name == "File Explorer":                        return w                except:                    pass                        for i in range(shellWindows.Count):                w = shellWindows.Item(i)                try:                    if w.hwnd == targetHwnd:                        return w                except:                    pass                        for i in range(shellWindows.Count):                w = shellWindows.Item(i)                try:                    if w.Visible and w.Name == "File Explorer":                        return w                except:                    pass                        return None        except Exception as e:            log.error(f"Error getting active Explorer window: {e}")            return None    def _getSelectedItems(self):        """Get selected items from active Explorer window"""        try:            focus = api.getFocusObject()            if focus and focus.appModule.appName == "explorer":                shellWindow = self._getActiveExplorerWindow()                if not shellWindow:                    return None, None                                    currentDocument = None                try:                    currentDocument = shellWindow.document                    if self.manager.lastExplorerDocument != currentDocument:                        self.manager.lastExplorerDocument = currentDocument                except:                    pass                                    selectedItems = []                if hasattr(shellWindow.document, 'SelectedItems'):                    selectedItemsCount = shellWindow.document.SelectedItems().Count                    for i in range(selectedItemsCount):                        item = shellWindow.document.SelectedItems().Item(i)                        selectedItems.append((item.Name, item.Path))                                return selectedItems, shellWindow            return None, None        except Exception as e:            log.error(f"Error getting selected items: {e}")            return None, None    def _executeWithSilence(self, func):        """Execute function with all announcements silenced"""        import speech        speech.cancelSpeech()        self.manager.suppressAllAnnouncements = True        try:            func()        finally:            core.callLater(1000, lambda: setattr(self.manager, 'suppressAllAnnouncements', False))    def _saySize(self):        self._executeWithSilence(self.fileOps.saySize)    def script_saySize(self, gesture):        self._saySize()    script_saySize.__doc__ = _("say size")    script_saySize.category = _("xPlorer")    script_saySize.gestures = ["kb(desktop):NVDA+shift+x"]    def _copySelectedNames(self):        self._executeWithSilence(self.clipboard.copySelectedNames)    def script_copySelectedNames(self, gesture):        self._copySelectedNames()    script_copySelectedNames.__doc__ = _("Copy selected file and folder names to clipboard")    script_copySelectedNames.category = _("xPlorer")    script_copySelectedNames.gestures = ["kb(desktop):NVDA+shift+c"]    def _copyFileContent(self):        self._executeWithSilence(self.clipboard.copyFileContent)    def script_copyFileContent(self, gesture):        self._copyFileContent()    script_copyFileContent.__doc__ = _("Copy content of selected text file(s) to clipboard")    script_copyFileContent.category = _("xPlorer")    script_copyFileContent.gestures = ["kb(desktop):NVDA+shift+v"]    def _compressZip(self):        self._executeWithSilence(self.compression.compressZip)    def script_compressZip(self, gesture):        self._compressZip()    script_compressZip.__doc__ = _("Compress selected items to ZIP")    script_compressZip.category = _("xPlorer")    script_compressZip.gestures = ["kb(desktop):NVDA+shift+z"]    def _renameFile(self):        self._executeWithSilence(self.fileOps.renameFile)    def script_renameFile(self, gesture):        self._renameFile()    script_renameFile.__doc__ = _("Rename selected file")    script_renameFile.category = _("xPlorer")    script_renameFile.gestures = ["kb(desktop):NVDA+shift+f2"]    def script_invertSelection(self, gesture):        self._executeWithSilence(self.selection.invertSelection)    script_invertSelection.__doc__ = _("Invert selection in File Explorer")    script_invertSelection.category = _("xPlorer")    script_invertSelection.gestures = ["kb(desktop):NVDA+shift+i"]    def _createContextMenu(self):        """Create and return the context menu"""        menu = wx.Menu()                compress_item = menu.Append(wx.ID_ANY, _("Compress zip"))        copy_content_item = menu.Append(wx.ID_ANY, _("Copy content"))        copy_names_item = menu.Append(wx.ID_ANY, _("Copy selected file and folder names"))        invert_selection_item = menu.Append(wx.ID_ANY, _("Invert selection"))        rename_item = menu.Append(wx.ID_ANY, _("Rename selected file"))        say_size_item = menu.Append(wx.ID_ANY, _("say size"))                menu.Bind(wx.EVT_MENU, lambda evt: core.callLater(0, self._executeWithSilence, self.compression.compressZip), compress_item)        menu.Bind(wx.EVT_MENU, lambda evt: core.callLater(0, self._executeWithSilence, self.clipboard.copyFileContent), copy_content_item)        menu.Bind(wx.EVT_MENU, lambda evt: core.callLater(0, self._executeWithSilence, self.clipboard.copySelectedNames), copy_names_item)        menu.Bind(wx.EVT_MENU, lambda evt: core.callLater(0, self._executeWithSilence, self.selection.invertSelection), invert_selection_item)        menu.Bind(wx.EVT_MENU, lambda evt: core.callLater(0, self._executeWithSilence, self.fileOps.renameFile), rename_item)        menu.Bind(wx.EVT_MENU, lambda evt: core.callLater(0, self._executeWithSilence, self.fileOps.saySize), say_size_item)                return menu    def _showContextMenu(self):        """Show the context menu asynchronously to avoid blocking"""        def show_menu():            try:                focus = api.getFocusObject()                if not focus or focus.appModule.appName != "explorer":                    ui.message(_("Not in File Explorer"))                    return                                import speech                speech.cancelSpeech()                                self.manager.contextMenuActive = True                self.manager.suppressAllAnnouncements = True                                last_focus = api.getFocusObject()                                menu = self._createContextMenu()                                frame = wx.Frame(gui.mainFrame, -1, "", pos=(0, 0), size=(0, 0))                try:                    frame.Show()                    frame.Raise()                                        frame.PopupMenu(menu)                                        if last_focus:                        last_focus.setFocus()                except Exception as e:                    log.error(f"Error displaying popup menu: {e}")                    ui.message(_("Error displaying context menu"))                finally:                    try:                        menu.Destroy()                    except:                        pass                    try:                        frame.Destroy()                    except:                        pass                    core.callLater(1000, lambda: setattr(self.manager, 'suppressAllAnnouncements', False))                    core.callLater(100, lambda: setattr(self.manager, 'contextMenuActive', False))                            except Exception as e:                log.error(f"Error in showContextMenu: {e}")                ui.message(_("Error opening context menu"))                self.manager.contextMenuActive = False                self.manager.suppressAllAnnouncements = False                wx.CallAfter(show_menu)    def script_openXPlorerContextMenu(self, gesture):        """Open xPlorer context menu"""        focus = api.getFocusObject()        if not focus or focus.appModule.appName != "explorer":            ui.message(_("This command is only available in File Explorer."))            return                    self._showContextMenu()    script_openXPlorerContextMenu.__doc__ = _("Open xPlorer context menu")    script_openXPlorerContextMenu.category = _("xPlorer")    script_openXPlorerContextMenu.gestures = ["kb(desktop):NVDA+alt+x"]    def chooseNVDAObjectOverlayClasses(self, obj, clsList):        self.manager.chooseNVDAObjectOverlayClasses(obj, clsList)    def event_gainFocus(self, obj, nextHandler):        self.manager.event_gainFocus(obj, nextHandler)    def event_focusEntered(self, obj, nextHandler):        self.manager.event_focusEntered(obj, nextHandler)    def event_foreground(self, obj, nextHandler):        self.manager.event_foreground(obj, nextHandler)    def event_UIA_elementSelected(self, obj, nextHandler):        self.manager.event_UIA_elementSelected(obj, nextHandler)