# clipboardManager.pyimport uiimport apiimport osimport wxfrom logHandler import logimport addonHandleraddonHandler.initTranslation()class ClipboardManager:    def __init__(self, plugin):        self.plugin = plugin    def copySelectedNames(self):        """Copy selected file and folder names to clipboard"""        focus = api.getFocusObject()        if not focus or focus.appModule.appName != "explorer":            return                    try:            selectedItems, shellWindow = self.plugin._getSelectedItems()            if not selectedItems:                ui.message(_("No items selected"))                return                            folders = []            files = []                        for name, path in selectedItems:                if os.path.isdir(path):                    folders.append(name)                else:                    files.append(name)                        folders.sort()            files.sort()                        sortedNames = folders + files                        namesText = "\n".join(sortedNames)                        if wx.TheClipboard.Open():                wx.TheClipboard.SetData(wx.TextDataObject(namesText))                wx.TheClipboard.Close()                if len(selectedItems) == 1:                    ui.message(_("Copied 1 item name to clipboard"))                else:                    ui.message(_("Copied {count} item names to clipboard").format(count=len(selectedItems)))            else:                ui.message(_("Could not open clipboard"))                        except Exception as e:            log.error(f"Error in copySelectedNames: {e}")            ui.message(_("Error copying names to clipboard"))    def copyFileContent(self):        """Copy content of selected text file(s) to clipboard"""        focus = api.getFocusObject()        if not focus or focus.appModule.appName != "explorer":            return                    try:            selectedItems, shellWindow = self.plugin._getSelectedItems()            if not selectedItems:                ui.message(_("No items selected"))                return                            for name, path in selectedItems:                if os.path.isdir(path):                    ui.message(_("Cannot copy content of folders, please select files only"))                    return                                textExtensions = ['.txt', '.py', '.js', '.html', '.css', '.xml', '.json',                             '.csv', '.md', '.ini', '.conf', '.cfg', '.java', '.cpp',                             '.c', '.h', '.php', '.rb', '.pl', '.sh', '.bat', '.ps1', '.rtf']                        textFiles = []            for name, path in selectedItems:                fileExt = os.path.splitext(path)[1].lower()                if fileExt in textExtensions:                    textFiles.append(path)                else:                    log.debug(f"Skipping non-text file: {name}")                        if not textFiles:                ui.message(_("No text files selected"))                return                            totalSize = 0            for filePath in textFiles:                try:                    totalSize += os.path.getsize(filePath)                except:                    pass                                if totalSize > 15 * 1024 * 1024:                ui.message(_("Total file size is too large to copy content"))                return                            combinedContent = ""            filesProcessed = 0                        for filePath in textFiles:                try:                    fileExt = os.path.splitext(filePath)[1].lower()                                        if fileExt == '.rtf':                        try:                            from striprtf.striprtf import rtf_to_text                            with open(filePath, 'r', encoding='utf-8', errors='ignore') as f:                                rtf_content = f.read()                            content = rtf_to_text(rtf_content)                        except ImportError:                            log.error("striprtf module not available for RTF processing")                            content = _("[RTF content - striprtf module not available]")                        except Exception as e:                            log.error(f"Error processing RTF file {filePath}: {e}")                            content = _("[Error processing RTF file]")                    else:                        with open(filePath, 'r', encoding='utf-8') as f:                            content = f.read()                                        if filesProcessed > 0:                        combinedContent += "\n\n"                    combinedContent += content                                        filesProcessed += 1                                    except UnicodeDecodeError:                    try:                        with open(filePath, 'r', encoding='latin-1') as f:                            content = f.read()                                                if filesProcessed > 0:                            combinedContent += "\n\n"                        combinedContent += content                                                filesProcessed += 1                    except:                        log.error(f"Failed to read file: {filePath}")                except Exception as e:                    log.error(f"Error reading file {filePath}: {e}")                        if not combinedContent.strip():                ui.message(_("No content could be read from selected files"))                return                            if wx.TheClipboard.Open():                wx.TheClipboard.SetData(wx.TextDataObject(combinedContent))                wx.TheClipboard.Close()                                if filesProcessed == 1:                    ui.message(_("Content from 1 file copied to clipboard"))                else:                    ui.message(_("Content from {count} files copied to clipboard").format(count=filesProcessed))            else:                ui.message(_("Could not open clipboard"))                        except Exception as e:            log.error(f"Error in copyFileContent: {e}")            ui.message(_("Error copying file content"))