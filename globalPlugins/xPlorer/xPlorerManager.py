# xPlorerManager.pyimport uiimport apifrom NVDAObjects import NVDAObjectfrom NVDAObjects.UIA import UIAfrom controlTypes import Roleimport addonHandlerfrom logHandler import logimport guiimport wximport gui.guiHelperfrom gui.settingsDialogs import SettingsPanelfrom .config import loadConfig, saveConfigimport coreaddonHandler.initTranslation()class LaconicFocusAncestor(NVDAObject):    isPresentableFocusAncestor = False    def _get_windowClassName(self):        conf = loadConfig()        if conf.get("suppressDirectUIAnnounce", True):            windowClass = super().windowClassName            if windowClass == "DirectUIHWND":                return "FakeDirectUIHWND"        return super().windowClassNameclass EmptyFolderStaticText(NVDAObject):    def _get_name(self):        conf = loadConfig()        if conf.get("announceEmptyFolder", True):            return _("Empty Folder")        return super().nameclass xPlorerSettingsPanel(SettingsPanel):    title = _("xPlorer")    def makeSettings(self, settingsSizer):        conf = loadConfig()        sHelper = gui.guiHelper.BoxSizerHelper(self, sizer=settingsSizer)                self.autoSelectFirstItem = sHelper.addItem(            wx.CheckBox(self, label=_("Automatically select the first item"))        )        self.autoSelectFirstItem.SetValue(conf["autoSelectFirstItem"])                self.announceEmptyFolder = sHelper.addItem(            wx.CheckBox(self, label=_("Announce 'Empty Folder' when entering an empty folder"))        )        self.announceEmptyFolder.SetValue(conf["announceEmptyFolder"])                self.suppressDirectUIAnnounce = sHelper.addItem(            wx.CheckBox(self, label=_("Suppress announcement of DirectUIHWND class"))        )        self.suppressDirectUIAnnounce.SetValue(conf["suppressDirectUIAnnounce"])    def onSave(self):        conf = {            "autoSelectFirstItem": self.autoSelectFirstItem.GetValue(),            "announceEmptyFolder": self.announceEmptyFolder.GetValue(),            "suppressDirectUIAnnounce": self.suppressDirectUIAnnounce.GetValue(),        }        saveConfig(conf)class ExplorerManager:    def __init__(self, plugin):        self.plugin = plugin        self.lastItem = None        self.lastParent = None        self.currentFolderPath = None    def getConfig(self):        return loadConfig()    def _isExplorerList(self, obj):        return (obj and obj.role == Role.LIST and                 isinstance(obj, UIA) and                 "explorerframe.dll" in obj.UIAElement.CachedProviderDescription.lower())    def _isFileItem(self, obj):        return (obj and obj.role == Role.LISTITEM and                 self._isExplorerList(obj.parent))    def _isValidExplorerContext(self, obj):        if not obj or obj.appModule.appName != "explorer":            return False        return (self._isExplorerList(obj) or                 self._isFileItem(obj))    def chooseNVDAObjectOverlayClasses(self, obj, clsList):        conf = self.getConfig()        if obj.appModule.appName == "explorer":            if conf.get("suppressDirectUIAnnounce", True) and obj.role in (Role.LIST, Role.TOOLBAR):                clsList.insert(0, LaconicFocusAncestor)            elif obj.role == Role.STATICTEXT and obj.name == "This folder is empty.":                clsList.insert(0, EmptyFolderStaticText)    def event_gainFocus(self, obj, nextHandler):        conf = self.getConfig()        if not self._isValidExplorerContext(obj):            nextHandler()            return                        if obj.role == Role.PANE and obj.firstChild and hasattr(obj.firstChild, "UIAAutomationId") and obj.firstChild.UIAAutomationId == "HomeListView":            def func():                try:                    obj.firstChild.children[1].setFocus()                except:                    pass            try:                core.callLater(200, func)            except:                pass                        if self._isFileItem(obj):            currentParent = obj.parent            parentChanged = currentParent != self.lastParent            self.lastParent = currentParent                        if parentChanged:                self.currentFolderPath = self._getFolderPath(currentParent)                        if self.lastItem != obj.name or parentChanged:                try:                    position = f"{obj.positionInfo.position} of {obj.positionInfo.itemCount}" if hasattr(obj, 'positionInfo') and obj.positionInfo else ""                    ui.message(f"{obj.name} {position}".strip())                    self.lastItem = obj.name                except:                    pass                nextHandler()    def _getFolderPath(self, listObj):        try:            parent = listObj            while parent and parent.role != Role.WINDOW:                parent = parent.parent                        if parent and parent.role == Role.WINDOW:                return parent.name        except:            pass        return None    def event_focusEntered(self, obj, nextHandler):        conf = self.getConfig()        if not self._isValidExplorerContext(obj):            nextHandler()            return                    if self._isExplorerList(obj):            self.currentFolderPath = self._getFolderPath(obj)                        if conf.get("autoSelectFirstItem", True) and obj.childCount > 0:                focus = obj.objectWithFocus()                if focus is not None and focus.role == Role.LISTITEM and focus.UIASelectionItemPattern:                    try:                        focus.UIASelectionItemPattern.Select()                        api.setNavigatorObject(focus)                        position = f"{focus.positionInfo.position} of {focus.positionInfo.itemCount}" if hasattr(focus, 'positionInfo') and focus.positionInfo else ""                        ui.message(f"{focus.name} {position} {_('select')}".strip())                    except:                        pass                else:                    firstChild = obj.firstChild                    if firstChild and firstChild.UIASelectionItemPattern:                        try:                            firstChild.UIASelectionItemPattern.Select()                            api.setNavigatorObject(firstChild)                            position = f"{firstChild.positionInfo.position} of {firstChild.positionInfo.itemCount}" if hasattr(firstChild, 'positionInfo') and firstChild.positionInfo else ""                            ui.message(f"{firstChild.name} {position} {_('select')}".strip())                        except:                            pass                nextHandler()    def event_foreground(self, obj, nextHandler):        nextHandler()    def event_UIA_elementSelected(self, obj, nextHandler):        nextHandler()